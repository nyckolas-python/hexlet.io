#!/usr/bin/env python3

# Паттерн "моносостояния" - общие одинаковые атрибуты для всех экзепляров класса 
#
# Инициализируется словарь при создании класса, а не экземпляра класса.
# При создании экземпляра всем экземплярам присваивается ссылка на один и тот же словарь,
# с которым и работают в итоге все экземпляры.
#
# 1) При создании нового экземпляра класса его атрибуту _dict_ назначается адрес в памяти,
# соответствующий атрибуту __shared_attr. Назначается один раз, но ссылка действует, пока объект существует.
# 2) Добавление нового свойства любому экземпляру приводит к записи в словарь __dict__.
# А словарь __dict__теперь ссылается не на самостоятельный объект, а на общий для всех __shared_attr.
# 3) Теперь у любого экземпляра словарь _dict_ ссылается на словарь __shared_attr,
# где хранятся старые и новые переменные.

class Borg:
    # защищенный атрибу - private название начинается с __double_underscored
    __shared_state = {
        'color': 'white',
        'age': 0
        }
    
    def __init__(self) -> None:
        self.__dict__ = self.__shared_state


def test():
    a1 = Borg()
    a1.new_state = 'I am a new attributes'
    print(a1.new_state)
    a2 = Borg()
    # Python искажает название защищенный атрибутов, но если знаешь название класса, то можно 
    # к ним получить доступ по шаблону <object_name>._<class_name>__<attr_name>
    print(a2._Borg__shared_state)
  
if __name__ == '__main__':
	test()